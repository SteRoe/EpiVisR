library(EpiVisR)
EpiVisR::EpiVisRApp()
library(EpiVisR)
EpiVisR::EpiVisRApp()
EpiVisR::EpiVisRApp()
config::get(file = "config.yml")
globalVariables$config <- config::get(file = "config.yml")
globalVariables
globalVariables$config
globalVariables
assign("globalVariables", globalVariables, envir = .GlobalEnv)
globalVariables$config <- config::get(file = "config.yml")
class(globalVariables)
EpiVisR::EpiVisRApp()
class(globalVariables)
EpiVisR::EpiVisRApp()
library(EpiVisR)
EpiVisR::EpiVisRApp()
class(globalVariables)
globalVariables$config <- config::get(file = "config.yml")
library(EpiVisR)
library(EpiVisR)
EpiVisR::EpiVisRApp()
loadResultFile(globalVariables, sessionVariables)
dat <- loadResultFile(globalVariables, sessionVariables)
dat<-NULL
library(EpiVisR)
EpiVisR::EpiVisRApp()
EpiVisR::EpiVisRApp()
EpiVisR::EpiVisRApp()
library(EpiVisR)
EpiVisR::EpiVisRApp()
dat <- addLinkToEWASDataHub(dat, globalVariables$config$baseURL_EWASDataHub)
dat <- addLinkToMRCEWASCatalog(dat, globalVariables$config$baseURL_MRCEWASCatalog)
library(EpiVisR)
EpiVisR::EpiVisRApp()
library(EpiVisR)
library(EpiVisR)
EpiVisR::EpiVisRApp()
getTraitsDFLong(globalVariables)
getResultDataSingleTrait(globalVariables, sessionVariables, FALSE)
df = getResultDataSingleTrait(globalVariables, sessionVariables, FALSE)
sessionVariables$resultDataSingleTrait = df
sessionVariables$traitDF <- traitDF(sessionVariables, globalVariables$config$mergeAttribut, globalVariables$config$genderAttribut) #if error occurs here, then the wrong Traits file is referenced
globalVariables$config$mergeAttribut
globalVariables$config$genderAttribut
trait = sessionVariables$trait$trait
library(EpiVisR)
library(EpiVisR)
EpiVisR::EpiVisRApp()
sessionVariables$traitsDFLong = getTraitsDFLong(globalVariables)
sessionVariables$dataFileName
library(EpiVisR)
EpiVisR::EpiVisRApp()
df = sessionVariables$traitsDFLong[,c(mergeAttribut, genderAttribut, trait)]
EpiVisR::EpiVisRApp()
library(EpiVisR)
library(EpiVisR)
EpiVisR::EpiVisRApp()
library(EpiVisR)
EpiVisR::EpiVisRApp()
library(EpiVisR)
library(EpiVisR)
EpiVisR::EpiVisRApp()
library(EpiVisR)
EpiVisR::EpiVisRApp()
data
View(data)
df
library(EpiVisR)
EpiVisR::EpiVisRApp()
library(EpiVisR)
EpiVisR::EpiVisRApp()
browseVignettes()
install.packages("rmarkdown")
usethis::use_vignette("EpiVisR")
# installing/loading the package:
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
# Installing pandoc
install.pandoc()
.libPaths()
#  .libPaths(c(""Y:/Home/roeder/R-4.1.0.3/library"", "C:/R/R-3.6.3/library"))
.libPaths(c(.libPaths(), "Y:/Home/roeder/pandoc"))
.libPaths()
pandoc.exe::
pandoc.exe::
pandoc.exe
library(rmarkdown)
install.packages(c("cli", "curl", "gargle", "googledrive", "isoband", "Rcpp", "RcppArmadillo", "readr", "stringi", "survey", "testthat"))
install.packages("learnr")
q()
