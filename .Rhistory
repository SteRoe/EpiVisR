probeIDs_complete = rbind(probeIDs_complete, probeIDsn)
position = which(annotation_ordered$name == b[67])
positionStart = position - range
positionEnd = position + range
probeIDsn = annotation_ordered[positionStart:positionEnd,]$name
probeIDs_complete = rbind(probeIDs_complete, probeIDsn)
position = which(annotation_ordered$name == b[68])
positionStart = position - range
positionEnd = position + range
probeIDsn = annotation_ordered[positionStart:positionEnd,]$name
probeIDs_complete = rbind(probeIDs_complete, probeIDsn)
position = which(annotation_ordered$name == b[69])
positionStart = position - range
positionEnd = position + range
probeIDsn = annotation_ordered[positionStart:positionEnd,]$name
probeIDs_complete = rbind(probeIDs_complete, probeIDsn)
position = which(annotation_ordered$name == b[70])
positionStart = position - range
positionEnd = position + range
probeIDsn = annotation_ordered[positionStart:positionEnd,]$name
probeIDs_complete = rbind(probeIDs_complete, probeIDsn)
position = which(annotation_ordered$name == b[71])
positionStart = position - range
positionEnd = position + range
probeIDsn = annotation_ordered[positionStart:positionEnd,]$name
probeIDs_complete = rbind(probeIDs_complete, probeIDsn)
position = which(annotation_ordered$name == b[72])
positionStart = position - range
positionEnd = position + range
probeIDsn = annotation_ordered[positionStart:positionEnd,]$name
probeIDs_complete = rbind(probeIDs_complete, probeIDsn)
position = which(annotation_ordered$name == b[73])
positionStart = position - range
positionEnd = position + range
probeIDsn = annotation_ordered[positionStart:positionEnd,]$name
probeIDs_complete = rbind(probeIDs_complete, probeIDsn)
position = which(annotation_ordered$name == b[74])
positionStart = position - range
positionEnd = position + range
probeIDsn = annotation_ordered[positionStart:positionEnd,]$name
probeIDs_complete = rbind(probeIDs_complete, probeIDsn)
position = which(annotation_ordered$name == b[75])
positionStart = position - range
positionEnd = position + range
probeIDsn = annotation_ordered[positionStart:positionEnd,]$name
probeIDs_complete = rbind(probeIDs_complete, probeIDsn)
position = which(annotation_ordered$name == b[76])
positionStart = position - range
positionEnd = position + range
probeIDsn = annotation_ordered[positionStart:positionEnd,]$name
probeIDs_complete = rbind(probeIDs_complete, probeIDsn)
position = which(annotation_ordered$name == b[77])
positionStart = position - range
positionEnd = position + range
probeIDsn = annotation_ordered[positionStart:positionEnd,]$name
probeIDs_complete = rbind(probeIDs_complete, probeIDsn)
position = which(annotation_ordered$name == b[78])
positionStart = position - range
positionEnd = position + range
probeIDsn = annotation_ordered[positionStart:positionEnd,]$name
probeIDs_complete = rbind(probeIDs_complete, probeIDsn)
position = which(annotation_ordered$name == b[79])
positionStart = position - range
positionEnd = position + range
probeIDsn = annotation_ordered[positionStart:positionEnd,]$name
probeIDs_complete = rbind(probeIDs_complete, probeIDsn)
position = which(annotation_ordered$name == b[80])
positionStart = position - range
positionEnd = position + range
probeIDsn = annotation_ordered[positionStart:positionEnd,]$name
probeIDs_complete = rbind(probeIDs_complete, probeIDsn)
fwrite (probeIDs_complete,"./inst/extdata/probeIDs_complete",sep="\t")
fwrite (probeIDs_complete,"./inst/extdata/probeIDs_complete.csv",sep="\t")
e=subset(beta,probeID %in% probeIDs_complete)
fwrite(e,"./inst/extdata/methylation_example_short2.csv",sep="\t",dec=".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
library(EpiVisR)
EpiVisR::EpiVisRApp()
globalVariables$config$dataDir
devtools::load_all(".")
library(EpiVisR)
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
config
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
devtools::load_all(".")
EpiVisR::EpiVisRApp()
EpiVisR::EpiVisRApp()
n
devtools::load_all(".")
EpiVisR::EpiVisRApp()
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
globalVariables$config$dataDir
dir.exists(globalVariables$config$dataDir)
devtools::load_all(".")
devtools::load_all(".")
install.packages("pkgload")
install.packages("testthat")
install.packages("pkgload")
install.packages("devtools")
remove.packages("devtools")
remove.packages("pkgload")
remove.packages("testthat")
install.packages("testthat", lib="Y:/Home/roeder/R-4.1.2.1/library/")
install.packages("pkgload", lib="Y:/Home/roeder/R-4.1.2.1/library/")
install.packages("devtools", lib="Y:/Home/roeder/R-4.1.2.1/library/")
install.packages("Rcpp", lib="Y:/Home/roeder/R-4.1.2.1/library/")
install.packages("yaml", lib="Y:/Home/roeder/R-4.1.2.1/library/")
install.packages("cli", lib="Y:/Home/roeder/R-4.1.2.1/library/")#
install.packages("cli", lib="Y:/Home/roeder/R-4.1.2.1/library/")
install.packages("cli", lib="Y:/Home/roeder/R-4.1.2.1/library/")
install.packages("glue", lib="Y:/Home/roeder/R-4.1.2.1/library/")
install.packages("glue", lib="Y:/Home/roeder/R-4.1.2.1/library/")
?
()
?(EpiVisRApp)
?(rpivisrapp)
?(epivisrapp)
? epivisrapp
??epivisrapp
?EpiVisR::EpiVisRApp
?EpiVisR::.onAttach
?EpiVisR::dummy()
?EpiVisR::dummy()
?dummy()
??EpiVisR::dummy()
??EpiVisR::dummy()
?dummy()
?EpiVisR::dummy()
?EpiVisR::.onAttach
library(EpiVisR)
??EpiVisR
system.file()
devtools::document()
roxygen2::roxygenise()
??EpiVisR
?EpiVisR::.onAttach
?EpiVisR::dummy
?EpiVisR::add
?EpiVisR::addLinkToEWASDataHub()
?EpiVisR::add()
?EpiVisR::.onAttach2
??EpiVisR::EpiVisRApp()
?EpiVisR::EpiVisRApp()
?EpiVisR
??EpiVisR
?EpiVisR::EpiVisRApp()
?EpiVisR::dummy()
library(EpiVisR)
?EpiVisR
??EpiVisR
??EpiVisR::onAttach()
??EpiVisR::dummy()
??EpiVisR::.onAttach()
??EpiVisR::.onAttach()
?EpiVisR::getTraitsDFLong()
?EpiVisR
??EpiVisR
if (base::isNamespaceLoaded("EpiVisR")) {
base::unloadNamespace("EpiVisR")
}
base::loadNamespace("EpiVisR")
base::unloadNamespace("EpiVisR")
base::unloadNamespace("EpiVisR")
devtools::load_all(".")
devtools::unload_all(".")
devtools::unload()
warnings()
base::loadedNamespaces()
base::loadNamespace("EpiVisR")
base::loadedNamespaces()
base::unloadNamespace("EpiVisR")
if (base::isNamespaceLoaded("EpiVisR")) {
base::unloadNamespace("EpiVisR")
}
base::unloadNamespace("EpiVisR")
devtools::install(build_vignettes = TRUE)
annotation <- meffil::meffil.get.features("450k")
annotation <- meffil::meffil.get.features("450k")
genelist<-fread(file="y:/Home/roeder/daten/KOLLEGEN/Escher/Bioassay.xlsx")
genelist<-readxl::(file="y:/Home/roeder/daten/KOLLEGEN/Escher/Bioassay.xlsx")
genelist<-readxl::read_xls(file="y:/Home/roeder/daten/KOLLEGEN/Escher/Bioassay.xlsx")
genelist<-readxl::read_xls("y:/Home/roeder/daten/KOLLEGEN/Escher/Bioassay.xlsx")
read_xls("y:/Home/roeder/daten/KOLLEGEN/Escher/Bioassay.xlsx")
read.xls("y:/Home/roeder/daten/KOLLEGEN/Escher/Bioassay.xlsx")
genelist<-readxl::read_xls("y:/Home/roeder/daten/KOLLEGEN/Escher/Bioassay.xlsx")
genelist<-readxl::read_xls("y:/Home/roeder/daten/KOLLEGEN/Escher/Bioassay.xlsx")
genelist<-readxl::read_xls(path="y:/Home/roeder/daten/KOLLEGEN/Escher/Bioassay.xlsx")
genelist<-readxl::read_xls(path="y:/Home/roeder/daten/KOLLEGEN/Escher/Bioassay.xlsx",sheet = "Tabelle1")
genelist<-readxl::read_excel(path="y:/Home/roeder/daten/KOLLEGEN/Escher/Bioassay.xlsx")
View(genelist)
g=genelist$Zieleintrag
View(g)
g
g=na.omit(g)
g
g=g[-25]
g
g=g[-26]
g
g=g[-27]
g
base::merge(annotation, g, by.x="gene.symbol", by.y="g")
g=as.data.frame((g))
base::merge(annotation, g, by.x="gene.symbol", by.y="g")
View(g)
g$(g)<-g
g$(g)
colnames(g)
colnames(g)[1]=g
colnames(g)[1]="g"
base::merge(annotation, g, by.x="gene.symbol", by.y="g")
a=base::merge(annotation, g, by.x="gene.symbol", by.y="g")
View(a)
View(g)
View(annotation)
l <- strsplit(as.character(annotation$gene.symbol), ';')
View(l)
annotationnew <- data.frame(Name = unlist(l), Name.string = rep(annotation$gene.symbol, lengths(l)))
View(annotationnew)
View(annotationnew)
b=base::merge(g, annotationnew, by.x = 'g', all.x = TRUE, by.y = "Name", all.y=FALSE)
View(b)
write.csv(b,file="y:/Home/roeder/daten/KOLLEGEN/Escher/Bioassay.csv")
unique(g$g)
View(annotationnew)
an=unique(annotationnew$Name.string)
View(an)
base::merge(annotation, an, by.x="gene.symbol")
c=base::merge(annotation, an, by.x="gene.symbol")
an=as.data.frame(an)
View(an)
c=base::merge(annotation, an, by.x="gene.symbol",by.y="an")
View(c)
View(an)
View(b)
c=inner_join(g, annotation, by=stringr::str_detect(g$g, annotation$gene.name))
c=dplyr::inner_join(g, annotation, by=stringr::str_detect(g$g, annotation$gene.name))
c=dplyr::inner_join(g, annotation, by=stringr::str_detect(annotation$gene.name, g$g))
c=dplyr::inner_join(annotation, g, by=stringr::str_detect(annotation$gene.name, g$g))
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "a$")
str_detect(fruit, "b")
str_detect(fruit, "[aeiou]")
dplyr::str_detect(fruit, "a")
stringr::str_detect(fruit, "a")
library(sqldf)
install.packages("sqldf")
library(sqldf)
sqldf::sqldf("select annotation.gene.name")
sqldf::sqldf("select annotation.gene.name" from annotation)
sqldf::sqldf("select annotation.gene.name from annotation")
sqldf::sqldf("select gene.name from annotation")
sqldf::sqldf("select gene.symbol from annotation")
sqldf::sqldf("select * from annotation")
sqldf::sqldf("select gene.symbol from annotation")
sqldf::sqldf("select annotation.name from annotation")
sqldf::sqldf("select annotation.gene_symbol from annotation")
sqldf::sqldf("select annotation.gene.symbol from annotation")
colnames(annotation)[7]
colnames(annotation)[7]=gene_symbol
sqldf::sqldf("select annotation.'gene.symbol' from annotation")
sqldf::sqldf("select annotation.name, annotation.'gene.symbol' from annotation")
sqldf::sqldf("select annotation.name, annotation.'gene.symbol' from annotation right join g on annotation.'gene.symbol' like '%' || g.g || '%'")
sqldf::sqldf("select annotation.name, annotation.'gene.symbol' from annotation left join g on annotation.'gene.symbol' like '%' || g.g || '%'")
sqldf::sqldf("select annotation.name, annotation.'gene.symbol' from annotation inner join g on annotation.'gene.symbol' like '%' || g.g || '%'")
c=sqldf::sqldf("select annotation.name, annotation.'gene.symbol' from annotation inner join g on annotation.'gene.symbol' like '%' || g.g || '%'")
View(c)
write.csv(c,file="y:/Home/roeder/daten/KOLLEGEN/Escher/Bioassay.csv")
annotation <- meffil::meffil.get.features("450k")
genelist<-readxl::read_excel(path="y:/Home/roeder/daten/KOLLEGEN/Escher/Bioassay.xlsx")
g=genelist$Zieleintrag
g=na.omit(g)
g
View(g)
g=as.data.frame((g))
View(g)
g=g[-29]
g=g[-27]
g=g[-25]
View(g)
g=g[-29,]
g=g[-27,]
g=g[-25,]
View(g)
g=genelist$Zieleintrag
g=na.omit(g)
g=g[-29]
g=g[-27]
g=g[-25]
View(g)
g=as.data.frame((g))
View(g)
library(sqldf)
c=sqldf::sqldf("select annotation.name, annotation.'gene.symbol' from annotation inner join g on annotation.'gene.symbol' like '%' || g.g || '%'")
View(g)
g=genelist$Zieleintrag
g=na.omit(g)
g=g[-29]
g=g[-27]
g=g[-25]
g=as.data.frame(g)
View(g)
c=sqldf::sqldf("select annotation.name, annotation.'gene.symbol' from annotation inner join g on annotation.'gene.symbol' like '%' || g.g || '%'")
write.csv(c,file="y:/Home/roeder/daten/KOLLEGEN/Escher/Bioassay.csv")
View(c)
meth=fread("f:/roeder/methylation_transposed2.csv", eep="\t", dec=".")
meth=data.table::fread("f:/roeder/methylation_transposed2.csv", eep="\t", dec=".")
meth=data.table::fread("f:/roeder/methylation_transposed2.csv", sep="\t", dec=".")
View(meth)
rownames(meth)=meth$probeID
meth$probeID = NULL
View(c)
meth$probeID = rownames(meth)
#3. merge c with real probeID
d=base::merge(c,meth,by.x="name",by.y="probeID", all.x=TRUE, all.y=FALSE)
View(d)
d$gene.symbol=NULL
rownames(d)=d$name
rownames(d)=d$name
rownames(d)
rownames(d)=NULL
rownames(d)
rownames(d)=d$name
unique(c$name)
d=unique(c$name)
d=as.data.frame(unique(c$name))
View(d)
c=as.data.frame(unique(c$name))
#3. merge c with real probeID
d=base::merge(c,meth,by.x="name",by.y="probeID", all.x=TRUE, all.y=FALSE)
View(c)
colnames(c)[1]="name"
#3. merge c with real probeID
d=base::merge(c,meth,by.x="name",by.y="probeID", all.x=TRUE, all.y=FALSE)
View(d)
rownames(d)=d$name
View(d)
d$name=NULL
View(d)
describe(d)
summary(d)
dd=t(d)
View(dd)
summary(dd)
e=summary(dd)
View(e)
e=stats::iqr(dd)
e=stats::IQR(dd)
e=stats::IQR(dd, na.rm=TRUE)
View(e)
View(dd)
e=stats::rowIQR(d, na.rm=TRUE)
rowIQR
e=matrixStats::rowIQR(d, na.rm=TRUE)
e=matrixStats::rowIQRs(d, na.rm=TRUE)
View(d)
e=matrixStats::rowIQRs(as.matrix(d))
View(e)
e=as.data.frame(matrixStats::rowIQRs(as.matrix(d)))
View(e)
View(e)
rownames(e)=rownames(d)
View(e)
View(e)
View(annotation)
f=order(e,decreasing = TRUE)
View(f)
colnames(e)[1]="IQR"
f=order(e$IQR,decreasing = TRUE)
f=as.data.frame(order(e$IQR,decreasing = TRUE))
View(f)
f=e[which(e$IQR > 0.1),]
f=as.data.frame(e[which(e$IQR > 0.1),])
View(f)
View(f)
colnames(f)[1]="IQR"
g=as.data.frame(order(f$IQR,decreasing = TRUE))
View(g)
View(f)
f=as.data.frame(e[which(e$IQR > 0.1),]$IQR)
View(e)
e[which(e$IQR > 0.1),]$IQR
e[which(e$IQR > 0.1),]
e$probeID=rownames(e)
View(e)
f=as.data.frame(e[which(e$IQR > 0.1),])
View(f)
g=as.data.frame(order(f$IQR,decreasing = TRUE))
View(g)
g=as.data.frame(sort.list(f$IQR,decreasing = TRUE))
View(g)
View(f)
g=base::merge(f,annotation,by.x="probeID",by.y="probeID", all.x=TRUE, all.y=FALSE)
View(g)
View(f)
g=base::merge(f,annotation,by.x="probeID",by.y="name", all.x=TRUE, all.y=FALSE)
View(g)
g=base::merge(f,annotation,by.x="probeID",by.y="name", all.x=TRUE, all.y=FALSE)
write.csv(g,file="y:/Home/roeder/daten/KOLLEGEN/Escher/mergedList.csv")
View(g)
devtools::install_github("ManuelHentschel/vscDebugger", lib="y:/Home/roeder/R-4.1.2.1/library/")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
globalVariables$config$dataDir
globalVariables
devtools::load_all(".")
EpiVisR::EpiVisRApp()
globalVariables$config$dataDir
traits <- getTraits(globalVariables, globalVariables$config$dataDir)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
directory
devtools::load_all(".")
EpiVisR::EpiVisRApp()
dir.exists(directory)
directory
sessionVariables$folder
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
n
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
sessionVariables
globalVariables = loadObjects(globalVariables,sessionVariables)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
devtools::load_all(".")
EpiVisR::EpiVisRApp()
globalVariables$config$dataDir
devtools::load_all(".")
EpiVisR::EpiVisRApp()
stringr::str_replace(config$betaFileName, "./inst/", packagePath)
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
globalVariables$config$dataDir
globalVariables$config$traitFileName
devtools::load_all(".")
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
devtools::load_all(".")
EpiVisR::EpiVisRApp()
globalVariables$beta[probeID,]
globalVariables$beta
globalVariables$beta[1,]
globalVariables$beta["cg16162899",]
globalVariables$beta["cg04915494",]
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
reDFCorrelatingProbes
