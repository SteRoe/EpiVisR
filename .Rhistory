View(df)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
sessionVariables$trait$trait
sessionVariables$trait$trait
devtools::load_all(".")
EpiVisR::EpiVisRApp()
df = sessionVariables$traitsDFLong
devtools::load_all(".")
EpiVisR::EpiVisRApp()
sessionVariables$traitsDFLong
str(sessionVariables$traitsDFLong)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
q
q
q()
exit
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
sessionVariables$traitDF
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
DF
DF
M_V
devtools::load_all(".")
EpiVisR::EpiVisRApp()
EpiVisR::EpiVisRApp()
DF
View(DF)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
plotly::plot_ly(data = DF, source = "plotlyManhattan")
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
View(DF)
library(EpiVisR)
EpiVisR::EpiVisRApp()
View(DF)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
globalVariables$EWAScatalogCount
df
View(df)
dplyr::left_join(df, globalVariables$EWAScatalogCount, by = c("probeID" = "CpG"))
View(globalVariables$EWAScatalogCount)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
EWAScatalogCount$`EWAScatalog$CpG`
EWAScatalogCount$CpG = EWAScatalogCount$`EWAScatalog$CpG`
EWAScatalogCount$`EWAScatalog$CpG`<-NULL
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
library(EpiVisR)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
View(DF)
d=na.omit(DF)
View(d)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
View(df)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
View(DF)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
library(EpiVisR)
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
Q
Q
Q
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
View(DF)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
output$plotManhattan
plotly::renderPlotly(plotlyManhattanVolcano(reDFManhattanVolcano(),"M"))
DT::renderDataTable({
id <- shiny::showNotification("printing data...", duration = NULL, closeButton = FALSE)
on.exit(shiny::removeNotification(id), add = TRUE)
tryCatch({
print(paste0(Sys.time(), " render data table Manhattan/ volcano."))
DT::datatable(reDFManhattanVolcano(), escape = F, extensions = c('Scroller', 'Buttons'), style = "bootstrap", class = "compact", width = "100%",
options = list(searching = TRUE, pageLength = 10, deferRender = TRUE, scrollY = 300, scrollX = TRUE, scroller = TRUE, dom = 'ftBS', buttons = c('copy', 'csv', 'excel','pdf')))
}, error = function(err) {
shiny::validate(shiny::need(nrow(df)>0,"No data to show"))
})
}, server = FALSE)
plotly::plot_ly(data = DF, source = "plotlyManhattan")
devtools::load_all(".")
EpiVisR::EpiVisRApp()
plotly::add_trace(x = ~globalPosition, y = ~P_VAL)
plotly::add_trace(x = ~globalPosition, y = ~P_VAL,color = ~chromosomeNum, colors = colors(24),
type = 'scatter', mode = 'markers',
#                                marker = list(size = sharedDF$data()$n, opacity = 0.5),
marker = list(opacity = 0.5, sizemode = 'diameter'),
size = DF$n)
plot %>% plotly::add_trace(x = ~globalPosition, y = ~P_VAL,color = ~chromosomeNum, colors = colors(24),
type = 'scatter', mode = 'markers',
#                                marker = list(size = sharedDF$data()$n, opacity = 0.5),
marker = list(opacity = 0.5, sizemode = 'diameter'),
size = DF$n)
plot %>% plotly::add_trace(x = ~globalPosition, y = ~P_VAL,color = ~chromosomeNum, colors = colors(24),
type = 'scatter', mode = 'markers',
#                                marker = list(size = sharedDF$data()$n, opacity = 0.5),
marker = list(opacity = 0.5, sizemode = 'diameter'),
size = DF$n,fill = ~'')
globalVariables$config$probeAttribut
globalVariables
globalVariables$config
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
devtools::load_all(".")
EpiVisR::EpiVisRApp()
c
devtools::load_all(".")
EpiVisR::EpiVisRApp()
stats::cor(globalVariables$beta.t,globalVariables$beta.t[,probeID], method = c("pearson"))
globalVariables$beta.t
devtools::load_all(".")
EpiVisR::EpiVisRApp()
t=as.numeric(beta.t)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
array(stats::cor(globalVariables$beta.t,globalVariables$beta.t[,probeID], method = c("pearson")))
globalVariables$beta.t
globalVariables$beta.t[,probeID]
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
nrow(correlatingProbes)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
library(EpiVisR)
EpiVisR::EpiVisRApp()
c
c
c
c
devtools::load_all(".")
EpiVisR::EpiVisRApp()
library(EpiVisR)
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
significanceBorder
EpiVisR::EpiVisRApp()
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
EpiVisR::EpiVisRApp()
all.results <- fread(fileName, stringsAsFactors=FALSE, header=TRUE, sep="\t", nrows = 10000, data.table = FALSE)
#  all.results<-setcolorder(all.results, c("probeID","BETA","SE", "P_VAL", "FDR","DeltaMeth","N","Outlying","Skewed","Clumpy","Sparse","Striated","Convex","Skinny","Stringy","Monotonic","scagnosticsScore2"))
#  all.results<-all.results[,1:16]
all.results<-setcolorder(all.results, c("probeID","BETA","SE", "P_VAL", "FDR","DeltaMeth","N"))
all.results<-all.results[,1:7]
#  all.results <- dplyr::left_join(all.results, globalVariables$annotation, by = c("probeID" = "name"))
#  all.results <- base::merge(all.results, annotation, by.x = "probeID", by.y = "name", all.x = TRUE, all.y = TRUE)
all.results <- base::merge(all.results, globalVariables$annotation, by.x = "probeID", by.y = "name", all.x = FALSE, all.y = FALSE) #was all.x = TRUE, all.y = FALSE)
all.results <- stats::na.omit(all.results)
View(all.results)
all.results <- fread(fileName, stringsAsFactors=FALSE, header=TRUE, sep="\t", nrows = 10000, data.table = FALSE)
#  all.results<-setcolorder(all.results, c("probeID","BETA","SE", "P_VAL", "FDR","DeltaMeth","N","Outlying","Skewed","Clumpy","Sparse","Striated","Convex","Skinny","Stringy","Monotonic","scagnosticsScore2"))
#  all.results<-all.results[,1:16]
all.results<-setcolorder(all.results, c("probeID","BETA","SE", "P_VAL", "FDR","DeltaMeth","N"))
all.results<-all.results[,1:7]
#  all.results <- dplyr::left_join(all.results, globalVariables$annotation, by = c("probeID" = "name"))
#  all.results <- base::merge(all.results, annotation, by.x = "probeID", by.y = "name", all.x = TRUE, all.y = TRUE)
all.results <- base::merge(all.results, globalVariables$annotation, by.x = "probeID", by.y = "name", all.x = FALSE, all.y = FALSE) #was all.x = TRUE, all.y = FALSE)
View(all.results)
all.results <- fread(fileName, stringsAsFactors=FALSE, header=TRUE, sep="\t", nrows = 10000, data.table = FALSE)
View(all.results)
all.results <- fread("./examples/data/NICOTINURIC_ACIDadj.csv", stringsAsFactors=FALSE, header=TRUE, sep="\t", nrows = 10, data.table = FALSE)
View(all.results)
fwrite(all.results,"./examples/data/NICOTINURIC_ACID.csv")
fwrite(all.results,"./examples/data/NICOTINURIC_ACID.csv",sep="\t",dec=".")
all.results <- fread("./examples/data/PHENYLALANINEadj.csv", stringsAsFactors=FALSE, header=TRUE, sep="\t", nrows = 10, data.table = FALSE)
fwrite(all.results,"./examples/data/PHENYLALANINE.csv",sep="\t",dec=".")
all.results <- fread("./examples/data/OCTANOYLCARNITINEadj.csv", stringsAsFactors=FALSE, header=TRUE, sep="\t", nrows = 10, data.table = FALSE)
fwrite(all.results,"./examples/data/OCTANOYLCARNITINE.csv",sep="\t",dec=".")
all.results <- fread("./examples/data/RIBOFLAVINadj.csv", stringsAsFactors=FALSE, header=TRUE, sep="\t", nrows = 10, data.table = FALSE)
fwrite(all.results,"./examples/data/RIBOFLAVIN.csv",sep="\t",dec=".")
all.results <- fread("./examples/data/GLUTAMIC_ACID_ARTIFACT_H2O_adj.csv", stringsAsFactors=FALSE, header=TRUE, sep="\t", nrows = 10, data.table = FALSE)
fwrite(all.results,"./examples/data/GLUTAMIC_ACID_ARTIFACT_H2O.csv",sep="\t",dec=".")
all.results <- fread("./examples/data/A5_S_METHYL_5_THIOADENOSINEadj.csv.csv", stringsAsFactors=FALSE, header=TRUE, sep="\t", nrows = 10, data.table = FALSE)
all.results <- fread("./examples/data/A5_S_METHYL_5_THIOADENOSINEadj.csv", stringsAsFactors=FALSE, header=TRUE, sep="\t", nrows = 10, data.table = FALSE)
fwrite(all.results,"./examples/data/A5_S_METHYL_5_THIOADENOSINE.csv",sep="\t",dec=".")
all.results <- fread("./examples/data/ENDOGENOUS_BIOMOLECULE_146_adj.csv", stringsAsFactors=FALSE, header=TRUE, sep="\t", nrows = 10, data.table = FALSE)
fwrite(all.results,"./examples/data/ENDOGENOUS_BIOMOLECULE_146.csv",sep="\t",dec=".")
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
all.results <- data.table::fread(fileName, stringsAsFactors = FALSE, header = TRUE, sep = "\t", data.table = FALSE)
globalVariables$config$probeAttribut
globalVariables$annotation
all.results
a <- base::merge(all.results, globalVariables$annotation, by.x = globalVariables$config$probeAttribut, by.y = "name", all.x = FALSE, all.y = FALSE)
a <- base::merge(all.results, globalVariables$annotation, by.x = "probeID", by.y = "name", all.x = FALSE, all.y = FALSE)
all.results$probeID
globalVariables$annotation$name
devtools::load_all(".")
EpiVisR::EpiVisRApp()
globalVariables$annotation$name
nrow(globalVariables$annotation$name)
nrow(globalVariables$annotation)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
nrow(globalVariables$annotation)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
mergeAttribut
genderAttribut
trait
sessionVariables$traitsDFLong
sessionVariables$trait
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
traitsDFLong <- fread("./examples/traits_short.csv", stringsAsFactors=FALSE, header=TRUE, sep="\t", nrows = 10, data.table = FALSE)
PHENO <- fread("y:/home/roeder/daten/KOLLEGEN/Wissenbach/UrineScreening/Urinescreening_short_KindID_2.csv", stringsAsFactors=FALSE, header=TRUE, sep="\t", data.table = FALSE)
View(PHENO)
PHENO <- fread("y:/home/roeder/daten/KOLLEGEN/Wissenbach/UrineScreening/Urinescreening_short_KindID_2.csv", stringsAsFactors=FALSE, header=TRUE, sep="\t", data.table = FALSE)
c(traits)
a=PHENO[,c(traits)]
c=c(traits)
PHENO[,c]
tra=c(traits)
tra=c(traits)
tr=c("a","b")
str(tr)
str(tra)
type(tra)
t=as.vector(tra)
typeof(tra)
typeof(tr)
t=as.character(tra)
a=PHENO[,c(t)]
a=PHENO[,t]
t
colnames(PHENO)
t
t[3]
t[3]="ENDOGENOUS_BIOMOLECULE_285_2_"
t
a=PHENO[,t]
t[2]="ENDOGENOUS_BIOMOLECULE_146_"
a=PHENO[,t]
t
a=PHENO[,t[1]]
a=PHENO[,t[1:3]]
a=PHENO[,t[1:5]]
a=PHENO[,t[1:4]]
t[4]="GLUTAMIC_ACID_ARTIFACT_H2O_"
a=PHENO[,t[1:7]]
a=PHENO[,t[1:9]]
View(a)
View(PHENO)
rownames(PHENO)
rownames(PHENO)=PHENO$ID_Kind
rownames(PHENO)
a=PHENO[,t[1:9]]
rownames(a)
View(a)
a$ID_Kind=rownames(a)
b=a[1:40,]
View(b)
colnames(globalVariables$beta)
cl=colnames(globalVariables$beta)
colnames(b)=cl
rownames(b)=cl
View(b)
b$ID_Kind=rownames(b)
View(b)
View(b)
colnames(b)
c= c("ID_Kind",colnames(b[1:9]))
setcolorder(b,c)
View(b)
fwrite(b,"./examples/traits_short.csv", stringsAsFactors=FALSE, header=TRUE, sep="\t")
fwrite(b,"./examples/traits_short.csv", sep="\t", dec=".")
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
library(EpiVisR)
EpiVisR::EpiVisRApp()
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
dat[dat$P_VAL <= significanceBorder,]
traitDF(sessionVariables, globalVariables$config$mergeAttribut, globalVariables$config$genderAttribut) #if error occurs here, then the wrong Traits file is referenced
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
DF
reDFManhattanVolcano
View(DF)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
plotlyManhattanVolcano(globalVariables,reDFManhattanVolcano(),"M")
devtools::load_all(".")
EpiVisR::EpiVisRApp()
p = plotly::plot_ly(data = DF, source = "plotlyManhattan")
plot(p)
plot(plot)
plot(plot)
View(DF)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
View(df)
globalVariables$EWAScatalogCount
View(globalVariables$EWAScatalogCount)
View(df)
View(globalVariables$EWAScatalogCount)
View(df)
a=dplyr::left_join(df, globalVariables$EWAScatalogCount, by = c("probeID" = "CpG"))
View(a)
View(df)
View(df)
devtools::load_all(".")
devtools::load_all(".")
EpiVisR::EpiVisRApp()
a=EWAScatalog %>% dplyr::group_by(EWAScatalog$CpG)
a=EWAScatalog %>% dplyr::group_by(EWAScatalog$CpG) %>% dplyr::tally(!is.na(EWAScatalog$CpG))
View(a)
a=EWAScatalog %>% dplyr::group_by(EWAScatalog$CpG)
View(a)
table(EWASCatalog$CpG)
table(EWAScatalog$CpG)
a=table(EWAScatalog$CpG)
a=data.frame(table(EWAScatalog$CpG))
View(a)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
EWAScatalogCount = data.frame(table(EWAScatalog$CpG))
colnames(EWAScatalogCount)[1]="CpG"
colnames(EWAScatalogCount)[2]="n"
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
globalVariables$beta.t[,probeIDs]
globalVariables$beta.t
str(globalVariables$beta.t)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
beta <- data.table::fread(betaFileName, stringsAsFactors=FALSE, header=TRUE, sep="\t", data.table = FALSE)
colnames(beta)[1]
colnames(beta)[1]="probeID"
colnames(beta)[1]
fwrite(beta,betaFileName,sep="\t",dec=".")
View(beta)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
#if we have a data.table here, rownames are missing and beta[probeID,] does not work
#solution: use data.frame instead
beta_single<-globalVariables$beta[probeID,]
globalVariables$beta[probeID,]
View(globalVariables$beta)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
devtools::load_all(".")
EpiVisR::EpiVisRApp()
EpiVisR::EpiVisRApp()
a=beta[,1:40]
names = c("C1","C2","C3")
names = c("C1","C2","C3", "C4","C5","C6","C7","C8","C9","C10","C11","C12","C13", "C14","C15","C16","C17","C18","C19","C20","C21","C22","C23", "C24","C25","C26","C27","C28","C29","C30","C31","C32","C33", "C34","C35","C36","C37","C38","C39","C40")
colnames(a)=names
colnames(a)
rownames(a)
rownames(beta)
names = c("probeID",C1","C2","C3", "C4","C5","C6","C7","C8","C9","C10","C11","C12","C13", "C14","C15","C16","C17","C18","C19","C20","C21","C22","C23", "C24","C25","C26","C27","C28","C29","C30","C31","C32","C33", "C34","C35","C36","C37","C38","C39","C40")
names = c("probeID","C1","C2","C3", "C4","C5","C6","C7","C8","C9","C10","C11","C12","C13", "C14","C15","C16","C17","C18","C19","C20","C21","C22","C23", "C24","C25","C26","C27","C28","C29","C30","C31","C32","C33", "C34","C35","C36","C37","C38","C39","C40")
a=beta[,1:41]
colnames(a)=names
colnames(a)
frwite(a,"f:/roeder/methylation_transposed3.csv",sep="\t",dec=".")
fwrite(a,"f:/roeder/methylation_transposed3.csv",sep="\t",dec=".")
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
globalVariables$annotation[order(globalVariables$annotation$chromosome, globalVariables$annotation$position),]
positionStart = position - range
positionStart = position - 10
range
range
as.data.frame(globalVariables$beta.t[,probeIDs])
str(globalVariables$beta.t)
str(globalVariables$beta.t)
str(globalVariables$beta)
devtools::load_all(".")
EpiVisR::EpiVisRApp()
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
typeof(beta)
typeof(beta.t)
rownames(beta.t)
colnames(beta.t)
typeof(beta)
typeof(beta.t)
View(beta)
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
devtools::load_all(".")
EpiVisR::EpiVisRApp()
